import { finishOptions, goToMenuOptions } from "../options.js";
import dictionary from "../assets/nouns.json" with { type: "json" };

export const onWordsCommand = (chats, chatId, bot) => {
    chats[chatId] = { wordGame: { words: new Set(), expectedLetter: null } };
    return bot.sendMessage(chatId, "–°—ã–≥—Ä–∞–µ–º –≤ —Å–ª–æ–≤–∞? –ù—É–∂–Ω–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ–≤–∞. –¢—ã –Ω–∞—á–∏–Ω–∞–µ—à—å", finishOptions);
}

export const wordsGame = async (chats, chatId, text, bot) => {
    const data = JSON.parse(JSON.stringify(dictionary));
    const dict = Object.entries(data).reduce((acc, [letter, words]) => {
        acc[letter] = new Set(words);
        return acc;
    }, {})
    
    const formattedText = text.toLowerCase();
    const dictLetters = new Set(Object.keys(dict));

    const savedData = chats[chatId].wordGame;

    if (text.length < 2) {
        return bot.sendMessage(chatId, "–í —Å–ª–æ–≤–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–µ –±—É–∫–≤—ã");
    }
    if (savedData.words.has(formattedText)) {
        return bot.sendMessage(chatId, "–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ, –ø—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–µ");
    }

    const firstLetter = formattedText[0];

    if (savedData.expectedLetter && firstLetter !== savedData.expectedLetter) {
        return bot.sendMessage(chatId, `–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –±—É–∫–≤—É ${savedData.expectedLetter}`);
    }

    if (!dict[firstLetter] || dict[firstLetter] && !dict[firstLetter].has(formattedText)) {
        return bot.sendMessage(chatId, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ üò≠, –ø—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞");
    }

    const getAvailableRandomWord = async () => {
        const lastLetter = dictLetters.has(formattedText.at(-1)) ? formattedText.at(-1) : formattedText.at(-2);
        if (!dictLetters.has(lastLetter)) {
            return bot.sendMessage(chatId, `–ö–∞–∂–µ—Ç—Å—è, —Å–ª–æ–≤ –Ω–∞ –±—É–∫–≤—É "${lastLetter}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —è –∏—Ö –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é`);
        }

        const setOfWordsInDict = dict[lastLetter];
        const setOfAvailableWords = setOfWordsInDict.difference(savedData.words);
        const wordsArray = [...setOfAvailableWords];
        const availableRandomWord = wordsArray[Math.floor(Math.random() * setOfAvailableWords.size)];

        if (setOfAvailableWords.size === 0) {
            return bot.sendMessage(chatId, `–£ –º–µ–Ω—è –Ω–µ—Ç —Å–ª–æ–≤, —Ç—ã –ø–æ–±–µ–¥–∏–ª ‚ú®`, goToMenuOptions);
        }
        return availableRandomWord;
    }
    
    const randomWord = await getAvailableRandomWord();
    if (typeof randomWord === "string") {
        savedData.words.add(formattedText);
        savedData.words.add(randomWord);
        savedData.expectedLetter = dictLetters.has(randomWord.at(-1)) ? randomWord.at(-1) : randomWord.at(-2);
        return bot.sendMessage(chatId, randomWord, finishOptions);
    }
}