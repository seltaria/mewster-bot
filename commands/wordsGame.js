import { Markup } from "telegraf";
import { commands, inlineKeyboard } from "../constants.js";
import { readFileSync } from "fs";
import path from 'path';
import process from "process";

export const handleWordsGame = (ctx, games) => {
  const chatId = ctx.chat.id;
  games[chatId] = { wordsGame: { words: new Set(), expectedLetter: null } };
  ctx.reply("–°—ã–≥—Ä–∞–µ–º –≤ —Å–ª–æ–≤–∞? –ù—É–∂–Ω–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ–≤–∞. –¢—ã –Ω–∞—á–∏–Ω–∞–µ—à—å",
    Markup.inlineKeyboard([
      [Markup.button.callback(commands.finishGame.description, commands.finishGame.command)]
    ])
  )
}

export const wordsGame = async (ctx, savedData) => {
  const text = ctx.text;

  let usersPath = path.join(process.cwd(), 'nouns.json');
  let rawData = readFileSync(usersPath);

  const data = await JSON.parse(rawData);
  
  const dict = Object.entries(data).reduce((acc, [letter, words]) => {
    acc[letter] = new Set(words);
    return acc;
  }, {})

  const formattedText = text.toLowerCase();
  const dictLetters = new Set(Object.keys(dict));

  if (text.length < 2) {
    return ctx.reply("–í —Å–ª–æ–≤–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–µ –±—É–∫–≤—ã");
  }
  if (savedData.words.has(formattedText)) {
    return ctx.reply("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ, –ø—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–µ");
  }

  const firstLetter = formattedText[0];

  if (savedData.expectedLetter && firstLetter !== savedData.expectedLetter) {
    return ctx.reply(`–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –±—É–∫–≤—É ${savedData.expectedLetter}`);
  }

  if (!dict[firstLetter] || dict[firstLetter] && !dict[firstLetter].has(formattedText)) {
    return ctx.reply("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ üò≠, –ø—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞");
  }

  const getAvailableRandomWord = async () => {
    const lastLetter = dictLetters.has(formattedText.at(-1)) ? formattedText.at(-1) : formattedText.at(-2);
    if (!dictLetters.has(lastLetter)) {
      return ctx.reply(`–ö–∞–∂–µ—Ç—Å—è, —Å–ª–æ–≤ –Ω–∞ –±—É–∫–≤—É "${lastLetter}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —è –∏—Ö –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é`);
    }

    const setOfWordsInDict = dict[lastLetter];
    const setOfAvailableWords = setOfWordsInDict.difference(savedData.words);
    const wordsArray = [...setOfAvailableWords];
    const availableRandomWord = wordsArray[Math.floor(Math.random() * setOfAvailableWords.size)];

    if (setOfAvailableWords.size === 0) {
      return ctx.reply(`–£ –º–µ–Ω—è –Ω–µ—Ç —Å–ª–æ–≤, —Ç—ã –ø–æ–±–µ–¥–∏–ª ‚ú®`, inlineKeyboard);
    }
    return availableRandomWord;
  }
  
  const randomWord = await getAvailableRandomWord();
  if (typeof randomWord === "string") {
    savedData.words.add(formattedText);
    savedData.words.add(randomWord);
    savedData.expectedLetter = dictLetters.has(randomWord.at(-1)) ? randomWord.at(-1) : randomWord.at(-2);
    return ctx.reply(randomWord, Markup.inlineKeyboard([
      [Markup.button.callback(commands.finishGame.description, commands.finishGame.command)]
    ]));
  }
}